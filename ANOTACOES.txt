1. Paginação ficou como tarefa extra, link com tutorial para usar:
https://www.youtube.com/watch?v=VZ5yPs_KEME


2. Biblioteca para acessibilidade da div de modal/dialog acessível (aquele efeito de aparecer algo na frente da tela e o resto escurecer para trás desse algo, pode ser um form, enquanto isso). Além disso, seguem todas as regras de ACESSIBILIDADE:

Radix: https://www.radix-ui.com/docs/primitives/components/dialog

npm install @radix-ui/react-dialog

Depois a gente usa o modal na forma de um contexto que envolve o botão ou parte que vai ativá-lo (Olhar em Header como fica, também há documentação no link acima do componente)

Nas referências, vemos o uso do TRIGGER com a propriedade asChild

Já o PORTAL leva para outro local da DOM. Isso porque o botão está no HEADER, mas o modal não tem nada a ver. Dentro do PORTAL, usamos a OVERLAY (camada escurinha que cobre o resto da página)

Para finalizar, dentro desse portal e depois da OVERLAY vai o Content e o Title (acessibilidade)

Agora cabe a nós estilizar tudo.

Utilizamos também construção de botões estilo Radio para o modal, um radio button acessível:

https://www.radix-ui.com/docs/primitives/components/radio-group


3. CONFIGURAÇÃO DE API (principal desse módulo 3) - JSON SERVER, instalar como dependência de Desenvolvimento (-D)

https://github.com/typicode/json-server

npm i json-server -D

para executar e com porta configurada em caso da 3000 estar ocupada (-w para "vigiar" mudanças e -d 500 para adicionar um delay de 500ms para todas as requisições):

npx json-server server.json -p 3333 -w -d 500

para SIMPLIFICAR: adicionamos no package um script chamado "dev:server" esse comando sem o npx

PASSAR DATA CERTINHA NO ARUIVO JSON:

new Date().toISOString() no console do navegador para ter a string tipo:
2023-06-20T20:03:02.883Z

ATENÇÃO! A API do json-server possui várias maneiras de buscar e filtrar dados pela URL. Vale conferir pela documentação quando necessário.


PAGINAÇÃO - Anotações para tentar lógica de paginação depois (aulas da trilha antiga):

1) LÓGICA:

get('/transactions', function (schema, request) {

const { page = 1, per_page = 5} = request.queryParams;

const total = schema.all('transactions').length
// array_dos_dados.length (neste caso transactions)

// pg 1 começa do 0; pg 2 começa do per_page etc

const pageStart = (Number(page) - 1) * Number(per_page);
const pageEnd = pageStart * Number(per_page);

const pageTransactions = schema.all('user').transactions.slice(pageStart, pageEnd)
// array_dos_dados.slice(pageStart, pageEnd)
})

2) COMPONENTE:

a) LÓGICA FUNCIONAL:

// Lógica bem chata de fazer para exibição, do tipo:
// "1... 4 5 6 ... 20"

Pagination:

interface PaginationProps {
  totalCountOfRegisters: number;
  registersPerPage?: number;
  currentPage?: number;
  onPageChange: (page: number) => void;
}

const siblingsCount = 1; // páginas exibidas antes e depois da selecionada

function generatePagesArray(from: number, to: number) {
  [...new Array(to - from)]
    .map((_, index) => {
      return from + index + 1
    })
    .filter(page => page > 0) // evita pags negativas
}


/* Ex do que a função fará:

generatePagesArray(2, 5)
[0, 0, 0] com o map:
[2 + 0 + 1, 2 + 1 + 1, 2 + 2 + 1]
[3, 4, 5] as páginas exibidas no fim
*/

const lastPage = Math.floor(totalCountOfRegisters / registersPerPage); // Arredonda pra cima

const previousPages = currentPage > 1
  ? generatePagesArray(currentPage - 1 - siblingsCount, currentPage - 1)
  : []; // Páginas anteriores

  const nextPages = currentPage < lastPage
  ? generatePagesArray(currentPage, Math.min(currentPage + siblingsCount, lastPage))
  : []; // Menor nº entre lastPage e currentPage + siblings Count


b) RENDERIZAÇÃO EM PAGINAÇÃO:

// Primeira Página (para não mostrar a 1 se ela já estiver na lógica do meio):
{currentPage > (1 + siblingsCount) && (
  <>
    <PaginationItem onPageChange={onPageChange} number={1} />
    {
      // se estiver a mais de 2 pags de distância:
       currentPage > (2 + siblingsCount) && <span>...<span/>
    }
  </>
)}

// As do meio:
{previousPages.length > 0 && previousPages.map((page) => {
  return <PaginationItem onPageChange={onPageChange} key={page} number={page} />
})}

<PaginationItem onPageChange={onPageChange} number={currentPage} isCurrent />

{nextPages.length > 0 && previousPages.map((page) => {
  return <PaginationItem onPageChange={onPageChange} key={page} number={page} />
})}


// Última página (para não mostrar a last se ela já estiver na lógica do meio):
{(currentPage + siblingsCount) < lastPage && (
  <>
  {
      // se estiver a mais de 2 pags de distância:
       (currentPage + 1 siblingsCount) < lastPage && <span>...<span/>
  }
  <PaginationItem onPageChange={onPageChange} number={lastPage} />
  </>
)}


c) RENDERIZAÇÃO EMBAIXO DA LISTAGEM:

// Totais que podem ser para testar os componentes 

<Pagination
  totalCountOfRegisters={100}
  currentPage={5}
  onPageChange={() => {}}
/>


d) TROCANDO DE PÁGINA PRA VALER :

const [page, setPage] = useState(1);
// DAR UM JEITO DE INSERIR PAGE NA FUNÇÃO QUE BUSCA AS TRANSAÇÕES, envolve um tipo:

interface GetTransactionsResponse {
  totalCount: number; // length?
  transactions: Transaction[];
}

// Talvez tenha problemas com o recarregamento visto no fim da aula de referência https://app.rocketseat.com.br/node/data-fetching-e-cache-local/group/construindo-aplicacao-1/lesson/trocando-de-pagina

<Pagination
  totalCountOfRegisters={data.totalCount}
  currentPage={page}
  onPageChange={setPage}
/>

// Props do PaginationItem (um button)
interface PaginationItemProps {
  pageNumber: number;
  isCurrent: boolean;
  onPageChange: (page: number) => void;
}

No botão:
onClick={() => onPageChange(pageNumber)}


4. PERFORMANCE DE RENDERIZAÇÃO:

Para evitar renderizações desnecessárias, implementamos no commit anterior uma lib que faz um uso de Context diferente, onde declaramos qual função ou variável de contexto será observada naquele componente. A instalação da biblioteca é através desse comando combinado com scheduler:

npm i use-context-selector scheduler

Esse selector evita renderizações a mais, com o objetivo de melhorar a performance a ser testada com o Profile do React-Dev-Tools no navegador. Porém, isso não significa que a performance seja baixa sem isso. Atenção com esse ponto.


5) APLICANDO useCallback():

Ele evita que uma função seja recriada em memória, caso nenhuma informação de que a função dependa seja mudada. No caso aplicamos isso no createTransaction. A exemplo do useEffect, possui um array de dependências para especificar as informações que vão justificar a recriação em memória da função.

Agora, o motivo de renderização do Modal não é mais a mudança do Contexto, e sim a renderização do componente pai do Modal. O mesmo vale para o SearchForm, no momento que aplicamos o useCallback nele também


6) APLICANDO memo:

Não é preciso evitar em todos os casos que o componente filho renderize por causa do componente pai. Mas, caso seja preciso, entre o memo. Esses casos costumam ser conteúdos de HTML muito grandes. Isso porque às vezes usar um memo pode custar mais fazer a comparação profunda, explicada abaixo, de um HTML pequeno.

a) Motivos para componentes renderizar:
- Hooks changed (state, context, reducer);
- Props changed;
- Parent rerendered (componente pai rerenderizar).

b) Fluxo de renderização (extremamente rápida):
- React recria o HTML da interface daquele componente;
- Compara a versão recriada do HTML com a versão anterior;
- Se mudou algo, ele reescreve o HTML na tela.

O memo, portanto, nada mais é do que um memorizador desse HTML. Ele adiciona um passo antes do Fluxo:
- Hooks changed? Props changed? (deep comparison);
- Comparar com a versão anterior dos Hooks e Props;
- Se mudou algo, ele vai permitir a nova renderização. Senão, ele nem entra no fluxo.


7) Aplicando useMemo:

Tem os mesmos princípios do Memo. Só que, em vez de funções, ele se aplica às variáveis. Quando ela é repassada para vários outros componentes, eles podem renderizar novamente. Não temos caso de uso para nenhum deles nesta aplicação. Ainda assim, vou manter o memo de exemplo no SearchForm. Assim como o exemplo do hook useMemo, no hook useSummary.
